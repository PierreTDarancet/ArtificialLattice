def make_sinx_unit_cell(N=14,L=8,periodic=True):
    if L%2!=0: 
        raise("L should be even")

    def shape_sin_x(pos,N=N,L=L): 
        x,y = pos
        b = Zigzag.prim_vecs[1][1]
        if 0<x < get_length(L):
            if np.sin(2*np.pi*x/get_length(L)) <= y <= get_width(N) + np.sin(2*np.pi*x/get_length(L)):
                return True 
            else: 
                return False
        else: 
            return False
    
    def make_lattice(syst):
        pos_unit = np.array([item.pos for item in syst.sites()])
        pos_unit[:,0] = pos_unit[:,0]/a[0]
        b_min,b_max = [np.min(pos_unit[:,1]),np.max(pos_unit[:,1])]
        b = [0,b_max - b_min]
        pos_unit[:,1] = (pos_unit[:,1]-b_min)/b[1]
        lattice = kwant.lattice.general([a,b],pos_unit)
        return lattice
    if periodic:
        syst = kwant.Builder(kwant.TranslationalSymmetry([get_length(L),0]))
    else: 
        syst = kwant.Builder()
    #syst = kwant.Builder()
    syst[Zigzag.shape(shape_sin_x,(0,0))] = 0
    syst[Zigzag.neighbors()] = -1
    a = [get_length(L),0]
    syst.eradicate_dangling()
    lattice = make_lattice(syst)
    return syst

def setup_sinx(N=12,L=16):
    GNRsinx = make_sinx_unit_cell(N=N,L=L)
    lead = make_sinx_unit_cell(N=N,L=L)
    sys = make_sinx_unit_cell(N=N,L=L,periodic=False)
    sys.attach_lead(lead)
    sys.attach_lead(lead.reversed());
    return GNRsinx, sys
